name: stage-ci

on:
  push:
    branches: stage

jobs:
  versioninfo:
    name: Change version and output
    # merge되었을 때에만 실행되도록 (recursive push 방지)
    if: github.event_name == 'push' && ${{ !contains(github.event.head_commit.message, 'auto-commit'}}
    runs-on: ubuntu-latest
    outputs:
      packagejsonVersion: ${{ fromJson(steps.packageJson.outputs.content).version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TEST }}
          ref: ${{ github.base_ref }}

      - name: setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: increase release number
        id: increaseReleaseNumber
        run: |
          npm version prerelease --preid=release
          git add .

      - name: Read package.json
        id: packageJson
        uses: juliangruber/read-file-action@v1
        with:
          path: ./package.json

      - name: commit released version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: stage
          commit_message: 'increase release number (auto-commit)'

      - name: print
        run: |
          echo "packagejsonVersion: ${{ fromJson(steps.packageJson.outputs.content).version }}"
          echo "github: ${{ github.event.head_commit.message }}"

  # buildinfo:
  #   name: Generate build info
  #   # merge되었을 때에만 실행되도록 (recursive push 방지)
  #   if: always() && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   needs: versioninfo
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         # token: ${{ secrets.PAT }}
  #         ref: ${{ github.base_ref }}
  #     - name: Set current date
  #       id: variables
  #       run: echo "::set-output name=now::$(date +'%Y-%d-%m %T')"
  #     - name: generate buildinfo file
  #       run: |
  #         rm .buildinfo.json
  #         echo "{"                                                                                    >> .buildinfo.json
  #         echo "  \"version\": \"${{ needs.versioninfo.outputs.packagejsonVersion }}\","              >> .buildinfo.json
  #         echo "  \"githubRunNumber\": \"${{ needs.versioninfo.outputs.nextGithubRunNumber }}\","     >> .buildinfo.json
  #         echo "  \"githubSha\": \"${{ github.sha }}\","                                              >> .buildinfo.json
  #         echo "  \"buildDate\": \"${{ steps.variables.outputs.now }}\""                              >> .buildinfo.json
  #         echo "}"                                                                                    >> .buildinfo.json
  #     - uses: stefanzweifel/git-auto-commit-action@v4
  #       with:
  #         branch: ${{ github.base_ref }}
  #         commit_message: 'build: generate .buildinfo.json (auto-commit)'

  # deploy:
  #   name: Build and deploy
  #   # merge되었을 때에만 실행되도록 (recursive push 방지)
  #   if: always() && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   needs: buildinfo
  #   steps:
  #     - name: build and deploy with vercel hook
  #       run: curl -X POST https://api.vercel.com/v1/integrations/deploy/prj_rHpQKriYvxAiDJ9EJgGfetUAiYUO/ajE620kwKn

  jira-automation:
    name: Jira Automation
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: versioninfo
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm install axios
      - name: Trigger Jira Automation Webhook (Stage)
        if: github.ref == 'refs/heads/stage'
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const axios = require('axios');
            const regexToParseTicketNumber = /(JAT-[0-9]*)/
            const commitMessage = process.env.COMMIT_MESSAGE
            const regexToParseNumber = /[0-9]+/
            const prNumber = Number(commitMessage.match(regexToParseNumber)[0])
            const response = []
            let tickets = []
            let page = 1
            while(true) {
              const { data } = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100,
                  page: page,
              });
              if (!!data.length) {
                response.push(...data);
                page++;
              } else {
                break;
              }
            }
            response.forEach((elem) => {
              const ticket = elem.commit.message.match(regexToParseTicketNumber)
              if (ticket) {
                tickets.push(ticket[0]);
              }
            });
            tickets = [...new Set(tickets)]
            if (!!tickets.length) {
              axios({
                url: process.env.JIRA_WEBHOOK_URL_TEST,
                method: 'post',
                headers: {'Content-type': 'application/json'},
                data: {
                  issues: tickets,
                  data: {
                    releaseVersion: process.env.RELEASE_VERSION
                  }
                }
              })
            }
        env:
          JIRA_WEBHOOK_URL_TEST: ${{ secrets.JIRA_WEBHOOK_URL_TEST }}
          RELEASE_VERSION: ${{ needs.versioninfo.outputs.packagejsonVersion }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

  notify-slack:
    name: Notify to slack for Build Result
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: versioninfo
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Release Slack Alert (Stage)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,ref,workflow # selectable (default: repo,message)
          custom_payload: |
            {
              attachments: [{
                text: `:spin_kemi: Kemi-Playground Frontend Stage Deploy Success :spin_kemi: \n Version: ${{ env.VERSION }} \n by ${process.env.AS_AUTHOR}
                \n<https://wiredcompany.atlassian.net/issues/?jql=labels%20in%20(%EC%BC%80%EB%AF%B8%ED%94%8C%EB%A0%88%EC%9D%B4%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C%2C%20%EC%BC%80%EB%AF%B8)%20AND%20%22%EB%B0%98%EC%98%81%20%EB%B2%84%EC%A0%84%20(QA%EC%84%9C%EB%B2%84)%22%20%3D%20${{ env.VERSION }}|Changed Jira Ticket List>
                \t<https://wiredcompany.atlassian.net/issues/?jql=project%20%3D%20KP%20AND%20status%20%3D%20%22DEVEL%20RELEASED%22|Cards with Devel-Released status>`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}
          VERSION: ${{ needs.versioninfo.outputs.packagejsonVersion }}-release${{ needs.versioninfo.outputs.nextGithubRunNumber }}
